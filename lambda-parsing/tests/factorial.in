// The Y-combinator, a fixed-point combinator
let Y = fun f -> (fun x -> f (x x)) (fun x -> f (x x)) in

// `==` returns 1 for true and zero for false.
let fact_gen = fun fact -> fun n ->
  ite (n == 0)
    1
    (n * (fact (n - 1)))
in

// Create the factorial function by applying the Y-combinator.
let factorial = Y fact_gen in

factorial 5 // Should be 120
